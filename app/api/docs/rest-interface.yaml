swagger: "2.0"
info:
  version: "0.0.1"
  title: Project School Timetables API
  description: "An API for timetables generation for schools"
  contact:
    email: "ricproenca@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http:\/\/www.apache.org\/licenses\/LICENSE-2.0.html"

# during dev, should point to your local machine
host: localhost:9000

# basePath prefixes all resource paths
basePath: /docs/

schemes:
  - http

# format of bodies a client can send (Content-Type)
consumes:
  - application/json

# format of the responses to the client (Accepts)
produces:
  - application/json

paths:
  /user:
    # our controller name
    x-swagger-router-controller: user

    get:
      tags:
        - "Users"
      operationId: getAll
      description: Get the users list

      # define the type of response for Success "200" and Error
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/GetUsersListResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    post:
      tags:
        - "Users"
      operationId: save
      description: Add a new user to the list
      # user info to be stored
      parameters:
        - name: user
          in: body
          required: true
          description: user properties
          schema:
            $ref: "#/definitions/User"
      responses:
        204:
          description: User successfully created.
        400:
          description: User couldn't have been created.
        405:
          description: Invalid input
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/{id}:
    # our controller name
    x-swagger-router-controller: user
    get:
      tags:
        - "Users"
      operationId: getOne
      description: Get a user
      # define the type of response for Success "200" and Error
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: user properties
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        400:
          description: Invalid id
        404:
          description: User does not exists
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      tags:
        - "Users"
      operationId: update
      description: Update a user
      # define the parameters
      parameters:
        - name: id
          description: user id
          type: string
          in: path
          required: true
        - name: user
          in: body
          required: true
          description: user properties
          schema:
            $ref: "#/definitions/User"
      responses:
        204:
          description: User successfully deleted.
        400:
          description: Invalid user supplied
        404:
          description: User does not exists
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      tags:
        - "Users"
      operationId: delete
      description: Delete a user
      # define the parameters
      parameters:
        - name: id
          description: user id
          type: string
          in: path
          required: true
      responses:
        204:
          description: User successfully deleted.
        404:
          description: User does not exists
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

# complex objects have schema definitions
definitions:

  User:
    type: object
    properties:
      email:
        type: string
        description: valid user email
      username:
        type: string
        description: unique app username
      password:
        type: string
        description: user password
      name:
        type: string
        description: user name
    required:
      - username
      - email

  GetUserResponse:
    properties:
      id:
        type: string
      email:
        type: string
      username:
        type: string
      password:
        type: string
      name:
        type: string

  GetUsersListResponse:
    properties:
      # The array of users
      users:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            username:
              type: string
            password:
              type: string
            name:
              type: string

  ErrorResponse:
    required:
      - code
      - message
    properties:
      code:
        type: integer
      message:
        type: string
